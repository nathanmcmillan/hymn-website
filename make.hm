#!/usr/bin/env hymn

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

use "code"

set header = io.read-lines('template/header.html')
set footer = io.read-lines('template/footer.html')

func whitespace(a) {
  set count = len(a) - len(text.left-strip(a))
  return a[0:count]
}

func dark-search-and-replace(content) {
  content = text.replace(content, '>Dark<', '>Light<')
  content = text.replace(content, 'href="/', 'href="/dark/')
  content = text.replace(content, 'href="/dark/dark', 'href="')
  content = text.replace(content, 'href="/dark/dark/dark', 'href="')
  return content
}

func search-and-replace(path, dark, content) {
  set out = []

  for line in content {
    set short = text.trim(line)
    if text.starts(short, '<header></header>') {
      set space = whitespace(line)
      push(out, space + '<header>')
      for h in header {
        push(out, space + '  ' + h)
      }
      push(out, space + '</header>')
    } elif text.starts(short, '<footer></footer>') {
      set space = whitespace(line)
      push(out, space + '<footer>')
      for f in footer {
        push(out, space + '  ' + f)
      }
      push(out, space + '</footer>')
    } elif text.starts(short, '<pre>') {
      set space = whitespace(line)
      set source = text.replace(text.replace(text.trim(line), '<pre>', ''), '</pre>', '')
      source = code-highlight(source)
      push(out, space + '<div class="code"><pre><code>' + source + '</code></pre></div>')
    } else {
      push(out, line)
    }
  }

  set this = text.replace(path, '\\', '/')
  if text.starts(this, './') { this = this[2:] }

  content = text.join(out, '\n')
  content = text.replace(content, '(This)', this)

  io.write(path, content)
  io.write(dark, dark-search-and-replace(content))
}

for file in path.list() {
  if text.ends(file, '.html') {
    io.remove(file)
  }
}

for file in path.list('source') {
  if text.ends(file, '.html') {
    io.remove(file)
  }
}

func recursive-remove(file) {
  if not io.exists(file) { return }
  if (io.stats(file).directory) {
    for child in path.list(file) {
      recursive-remove(child)
    }
  }
  io.remove(file)
}

recursive-remove('dark')

io.mkdir('dark')

func recursive-make(parent) {
  set symbol = index(parent, path.symbol)
  set directory = none
  if symbol > 0 {
    directory = parent[symbol + 1:]
  }
  for file in path.list(parent) {
    if io.stats(file).directory {
      recursive-make(file)
      continue
    }
    set name = path.base(file)
    if directory != none {
      io.mkdir(directory)
      io.mkdir(path.cat('dark', directory))
      name = path.cat(directory, name)
    }
    set dark = path.cat('dark', name)
    set contents = io.read-lines(file)
    search-and-replace(name, dark, contents)
  }
}

recursive-make('html')

use "css-make"
