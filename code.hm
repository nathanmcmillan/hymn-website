# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# ["#.*$", ["comment"]],
# ["\\b(copy|delete|float|index|int|insert|keys|pop|echo|print|push|int|string|exists|type)\\b", [null, "constant"]],
# ["\\b(use|let|if|elif|else|for|while|return|break|continue|in|try|except)\\b", [null, "keyword"]],
# ["\\b(func) (\\w+)", [null, "keyword", "entity"]],
# ["(=|>=|<=|!=|<|>|==)", [null, "keyword"]],
# ["(\\+|-|\\*|\\/|%|&|\\||\\^|~|<<|>>)", [null, "keyword"]],
# ["\\b(true|false|none)\\b", [null, "constant"]],
# ["\\b([0-9]+(?:\\.[0-9]+)?)\\b", [null, "constant"]],
# ["\".*?\"", ["string"]],
# ["'.*?'", ["string"]]

let directory = 'code/'

let rules = [
  { pattern: "#.*$", capture: ["comment"] },
  { pattern: "[%s%p](let)[%s%p]+([%w-]+)[%s%p]", capture: [none, "keyword", "entity"] },
  { pattern: "[%s%p](copy)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](delete)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](float)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](index)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](int)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](insert)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](inspect)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](keys)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](pop)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](push)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](echo)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](print)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](str)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](exists)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](type)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](use)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](let)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](if)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](elif)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](else)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](for)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](while)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](return)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](break)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](continue)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](in)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](try)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](except)[%s%p]", capture: [none, "keyword"] },
  { pattern: "[%s%p](func)[%s%p]+([%w-]+)[%s%p]", capture: [none, "keyword", "entity"] },
  { pattern: ">>>", capture: ["keyword"] },
  { pattern: "<<", capture: ["keyword"] },
  { pattern: ">>", capture: ["keyword"] },
  # { pattern: "[=><+-*/&^~\\]", capture: ["keyword"] },
  { pattern: "[%s%p](true)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](false)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](none)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](%d+\\.%d+)[%s%p]", capture: [none, "constant"] },
  { pattern: "[%s%p](%d+)[%s%p]", capture: [none, "constant"] },
  { pattern: '".-"', capture: ["string"] },
  { pattern: "'.-'", capture: ["string"] }
]

func escape(input) {
  input = text.replace(input, "<", "&lt;")
  input = text.replace(input, ">", "&gt;")
  return input
}

func code-highlight(path) {
  let source = io.read-lines(directory + path)
  out = []
  for line in source {
    if line == "" { push(out, "") continue }
    html = ""
    while true {
      let any = false
      for rule in rules {
        let match = pattern.find(line, rule.pattern)
        if match == none { continue }
        if match {
          let capture = rule.capture
          let count = len(capture)
          if count == 1 {
            if match[0] > 0 { html += escape(line[:match[0]]) }
            html += "<" + capture[0] + ">" + escape(line[match[0]:match[1]]) + "</" + capture[0] + ">"
            if match[1] >= len(line) { break }
            line = line[match[1]:]
          } else {
            if len(match) < 2 { throw "missing capture group: ${match} / ${capture} (${rule.pattern})" }
            if match[2] > 0 { html += escape(line[:match[2]]) }
            let g = 0
            for i = 1, i < count {
              g = i * 2
              if g >= len(match) { throw "missing capture group: ${match} / ${capture} (${rule.pattern})" }
              if i != 1 {
                html += escape(line[match[g - 1]:match[g]])
              }
              html += "<" + capture[i] + ">" + escape(line[match[g]:match[g + 1]]) + "</" + capture[i] + ">"
            }
            if match[g + 1] >= len(line) { break }
            line = line[match[g + 1]:]
          }
          any = true
          break
        }
      }
      if !any { break }
    }
    html += escape(line)
    push(out, html)
  }
  return text.join(out, '\n')
}
