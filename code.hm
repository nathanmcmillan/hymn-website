# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

let directory = 'code/'

let rules = [
  { pattern: '".-"', capture: ["string"] },
  { pattern: "'.-'", capture: ["string"] },
  { pattern: "#.*$", capture: ["comment"] },
  { pattern: "(let)[%s%p]+([%w-]+)[%s%p]", capture: [none, "keyword", "entity"] },
  { pattern: "(func)[%s%p]+([%w-]+)[%s%p]", capture: [none, "keyword", "entity"] },
  { pattern: "(copy)[%s%p]", capture: [none, "constant"] },
  { pattern: "(clear)[%s%p]", capture: [none, "constant"] },
  { pattern: "(delete)[%s%p]", capture: [none, "constant"] },
  { pattern: "(float)[%s%p]", capture: [none, "constant"] },
  { pattern: "(index)[%s%p]", capture: [none, "constant"] },
  { pattern: "(int)[%s%p]", capture: [none, "constant"] },
  { pattern: "(insert)[%s%p]", capture: [none, "constant"] },
  { pattern: "(inspect)[%s%p]", capture: [none, "constant"] },
  { pattern: "(keys)[%s%p]", capture: [none, "constant"] },
  { pattern: "(pop)[%s%p]", capture: [none, "constant"] },
  { pattern: "(push)[%s%p]", capture: [none, "constant"] },
  { pattern: "(echo)[%s%p]", capture: [none, "constant"] },
  { pattern: "(print)[%s%p]", capture: [none, "constant"] },
  { pattern: "(str)[%s%p]", capture: [none, "constant"] },
  { pattern: "(exists)[%s%p]", capture: [none, "constant"] },
  { pattern: "(type)[%s%p]", capture: [none, "constant"] },
  { pattern: "(len)[%s%p]", capture: [none, "constant"] },
  { pattern: "(true)[%s%p]", capture: [none, "constant"] },
  { pattern: "(false)[%s%p]", capture: [none, "constant"] },
  { pattern: "(none)[%s%p]", capture: [none, "constant"] },
  { pattern: "(use)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(let)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(if)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(elif)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(else)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(for)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(while)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(return)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(break)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(continue)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(in)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(try)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(except)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(throw)[%s%p]", capture: [none, "keyword"] },
  { pattern: ">>>", capture: ["keyword"] },
  { pattern: "<<", capture: ["keyword"] },
  { pattern: ">>", capture: ["keyword"] },
  { pattern: "->", capture: ["keyword"] },
  { pattern: "==", capture: ["keyword"] },
  { pattern: "!=", capture: ["keyword"] },
  { pattern: "[!=><&~/+-*^]", capture: ["keyword"] },
  { pattern: "%d+%.%d+", capture: ["constant"] },
  { pattern: "%d+", capture: ["constant"] }
]

let c-rules = [
  { pattern: '".-"', capture: ["string"] },
  { pattern: "'.-'", capture: ["string"] },
  { pattern: "^%s*//.*$", capture: ["comment"] },
  { pattern: "^%s*/?* .*$", capture: ["comment"] },
  { pattern: "(printf)[%s%p]", capture: [none, "constant"] },
  { pattern: "(fprintf)[%s%p]", capture: [none, "constant"] },
  { pattern: "(free)[%s%p]", capture: [none, "constant"] },
  { pattern: "(memcpy)[%s%p]", capture: [none, "constant"] },
  { pattern: "(void)[%s%p]", capture: [none, "constant"] },
  { pattern: "(NULL)[%s%p]", capture: [none, "constant"] },
  { pattern: "(bool)[%s%p]", capture: [none, "constant"] },
  { pattern: "(char)[%s%p]", capture: [none, "constant"] },
  { pattern: "(int)[%s%p]", capture: [none, "constant"] },
  { pattern: "(uint8_t)[%s%p]", capture: [none, "constant"] },
  { pattern: "(true)[%s%p]", capture: [none, "constant"] },
  { pattern: "(false)[%s%p]", capture: [none, "constant"] },
  { pattern: "(float)[%s%p]", capture: [none, "constant"] },
  { pattern: "(double)[%s%p]", capture: [none, "constant"] },
  { pattern: "(size_t)[%s%p]", capture: [none, "constant"] },
  { pattern: "(#define)[%s%p]", capture: [none, "constant"] },
  { pattern: "(#undef)[%s%p]", capture: [none, "constant"] },
  { pattern: "(#ifdef)[%s%p]", capture: [none, "constant"] },
  { pattern: "(#ifndef)[%s%p]", capture: [none, "constant"] },
  { pattern: "#else", capture: ["constant"] },
  { pattern: "#endif", capture: ["constant"] },
  { pattern: "(#include)[%s%p](<.->)", capture: [none, "constant", "string"] },
  { pattern: "(#include)[%s%p]", capture: [none, "constant"] },
  { pattern: "(if)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(else)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(switch)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(case)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(default)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(for)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(while)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(return)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(break)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(continue)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(goto)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(struct)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(typedef)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(enum)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(static)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(const)[%s%p]", capture: [none, "keyword"] },
  { pattern: "(unsigned)[%s%p]", capture: [none, "keyword"] },
  { pattern: "->", capture: ["keyword"] },
  { pattern: "<<", capture: ["keyword"] },
  { pattern: ">>", capture: ["keyword"] },
  { pattern: "==", capture: ["keyword"] },
  { pattern: "!=", capture: ["keyword"] },
  { pattern: "[!=><&~/+-*^]", capture: ["keyword"] },
  { pattern: "%d+%.%d+", capture: ["constant"] },
  { pattern: "%d+", capture: ["constant"] }
]

func escape(input) {
  input = text.replace(input, "<", "&lt;")
  input = text.replace(input, ">", "&gt;")
  input = text.replace(input, '"', "&quot;")
  return input
}

func code-highlight(path) {
  if text.ends(path, '.hm') {
    return code-span(path, rules)
  }
  return code-span(path, c-rules)
}

func code-span(path, rules) {
  let source = io.read-lines(directory + path)
  out = []
  for line in source {
    if line == "" { push(out, "") continue }
    html = ""
    while true {
      let top = none
      let left = none
      for rule in rules {
        let match = pattern.find(line, rule.pattern)
        if match == none { continue }
        let zero = match[0]
        if zero > 0 and !pattern.match(line[zero - 1], "[%s%p]") { continue }
        if top == none or zero < left[0] {
          top = rule
          left = match
          if zero == 0 { break }
        }
      }
      if top == none { break }
      let match = left
      let capture = top.capture
      let count = len(capture)
      if count == 1 {
        if match[0] > 0 { html += escape(line[:match[0]]) }
        html += "<" + capture[0] + ">" + escape(line[match[0]:match[1]]) + "</" + capture[0] + ">"
        if match[1] >= len(line) { line = "" break }
        line = line[match[1]:]
      } else {
        if len(match) < 2 { throw "missing capture group: ${match} / ${capture} (${top.pattern})" }
        if match[2] > 0 { html += escape(line[:match[2]]) }
        let g = 0
        for i = 1, i < count {
          g = i * 2
          if g >= len(match) { throw "missing capture group: ${match} / ${capture} (${top.pattern})" }
          if i != 1 {
            html += escape(line[match[g - 1]:match[g]])
          }
          html += "<" + capture[i] + ">" + escape(line[match[g]:match[g + 1]]) + "</" + capture[i] + ">"
        }
        if match[g + 1] >= len(line) { line = "" break }
        line = line[match[g + 1]:]
      }
    }
    html += escape(line)
    push(out, html)
  }
  return text.join(out, '\n')
}
